import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";

import type { AppState, AppThunk } from "../store";
// import { fetchCount } from './../counterAPI'
import type { PropertyProperty, Settings } from "../../types/types";
import { fetchSettings } from "../api/settingsApi";
import { Search } from "../../../pages";

export interface PriceRange {
  pricegte?: number;
  pricelte?: number;
}
export interface FilterType {
  priceRange?: PriceRange;
  state?: boolean;
  justAvailable: boolean;
  unbleivable: boolean;
  isSale: boolean;
  brands: string[];
  category: string[];
  availableBrands: string[];
}
export interface SearchType {
  filter: FilterType;
  sortType: "asce" | "desc";
  sortBy:
    | "price"
    | "interest"
    | "brand"
    | "name"
    | "date"
    | "sale"
    | "sell"
    | "view"
    | string;
}
export const SortTranslate = {
  price: "بر اساس قیمت",
  interest: "محبوب ترینها",
  brand: "به ترتیب برند",
  name: "بر اساس اسم",
  date: "تاریخ بروزرسانی",
  sale: "بیشترین تخفیف",
  sell: "پر فروشترین ها",
  view: "بیشترین بازدید",
};
export interface SettingsState {
  value: Settings[];
  categories: Settings;
  status: "idle" | "loading" | "failed";
  crm: "open" | "close";
  search: SearchType;
  searchState: "edited" | "idle" | "shouldhandle";
}

const initialState: SettingsState = {
  searchState: "idle",
  value: [],
  categories: {},
  status: "loading",
  crm: "close",
  search: {
    sortType: "asce",
    sortBy: "interest",
    filter: {
      justAvailable: false,
      unbleivable: false,
      isSale: false,
      brands: [],
      category: [],
      availableBrands: [],
    },
  },
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchSettingsAsync = createAsyncThunk(
  "settings/fetchSettings",
  async () => {
    const response = await fetchSettings();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const settingsSlice = createSlice({
  name: "settings",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    crmChangeState: (state) => {
      if (state.crm === "close") {
        state.crm = "open";
      }
      // else {
      //   state.crm = "close";
      // }
      // console.log("is cloese");
    },
    setSearchConfig: (state, action: PayloadAction<SearchType>) => {
      state.search = action.payload;
    },
    setSearchState: (
      state,
      action: PayloadAction<"edited" | "idle" | "shouldhandle">
    ) => {
      state.searchState = action.payload;
    },
    // decrement: (state) => {
    //   state.value -= 1
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

  extraReducers: (builder) => {
    builder
      .addCase(fetchSettingsAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchSettingsAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.value = action.payload;
        const index = action.payload.findIndex(
          (item) => item.name === "categories"
        );
        state.categories = action?.payload?.[index] ?? [];
      })
      .addCase(fetchSettingsAsync.rejected, (state, action) => {
        state.status = "failed";
        state.value = [];
      });
  },
});

export const { crmChangeState, setSearchConfig, setSearchState } =
  settingsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectSettings = (state: AppState) => state.settings.value;
export const selectSettingsStatus = (state: AppState) => state.settings.status;
export const crmStatus = (state: AppState) => state.settings.crm;
export const searchConfig = (state: AppState) => state.settings.search;
export const selectCategories = (state: AppState) => state.settings.categories;
export const selectSearchState = (state: AppState) =>
  state.settings.searchState;

// export const selectUserInfo = (state: AppState) => state.client.value;
// We can also write thunks by hand, which may contain both sync and async logi c.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState())
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount))
//     }
//   }

export default settingsSlice.reducer;
