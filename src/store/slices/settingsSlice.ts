import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import type { AppState, AppThunk } from "../store";
import type { PropertyProperty } from "../../types/types";
import { fetchSettings } from "../api/settingsApi";

export type ApiFetchStatus = "initial" | "request" | "rejected" | "success";
export type deviceTypes = "Sensors Module" | "Electrical panel";
export interface Device {
  id: string;
  title: string;
  type: deviceTypes;
  dateCreated: Date;
}
export interface Devices {
  data?: Device[];
  status: ApiFetchStatus;
}
export interface Sensors {
  status: ApiFetchStatus;
}
export interface Theme {
  themeColor?: "dark" | "light";
}
export interface Theme {
  data?: Theme;
  status: ApiFetchStatus;
}
export interface User {
  data?: Theme;
  status: ApiFetchStatus;
}
export interface Settings {
  devices?: Devices;
  sensors?: Sensors;
  theme?: Theme;
  user?: User;
}

const initialState: Settings = {};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchSettingsAsync = createAsyncThunk(
  "settings/fetchSettings",
  async () => {
    const response = await fetchSettings();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const settingsSlice = createSlice({
  name: "settings",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // decrement: (state) => {
    //   state.value -= 1
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

  extraReducers: (builder) => {
    builder;
  },
});

export const {} = settingsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectSettings = (state: AppState) => state.settings.value;
// export const selectSettingsStatus = (state: AppState) => state.settings.status;
// export const crmStatus = (state: AppState) => state.settings.crm;
// export const searchConfig = (state: AppState) => state.settings.search;
// export const selectCategories = (state: AppState) => state.settings.categories;
// export const selectSearchState = (state: AppState) =>
//   state.settings.searchState;

// export const selectUserInfo = (state: AppState) => state.client.value;
// We can also write thunks by hand, which may contain both sync and async logi c.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState())
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount))
//     }
//   }

export default settingsSlice.reducer;
